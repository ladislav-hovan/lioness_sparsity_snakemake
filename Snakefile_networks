# TODO: Make sure that changing GPU to CPU does not trigger reruns - but how?
rule calculate_lioness_networks:
    input:
        S_ANY_EXPRESSION_FILE,
        F_MOTIF_FILE,
        F_PPI_FILE,
    output:
        S_LIONESS_TSV,
    threads:
        1 if USE_GPU else config['lioness_threads']
    resources:
        gpus = int(USE_GPU)
    params:
        gpu_manager = gpu_manager
    script:
        f'scripts/calculate_lioness_networks.py'
    
    # Future possible implementation once the run bug is fixed
    # https://github.com/snakemake/snakemake/issues/2350
    # run:
    #     from scripts.calculate_lioness_networks import create_lioness_networks

    #     if USE_GPU:
    #         with allocate_gpus(gpu_manager, resources['gpus']) as gpu_ids:
    #             # Only one device is yielded here
    #             with gpu_devices[gpu_ids[0]]:
    #                 create_lioness_networks(
    #                     input[0], 
    #                     input[1], 
    #                     input[2], 
    #                     '.', 
    #                     'gpu', 
    #                     lioness_options={
    #                         'start': 1, 
    #                         'end': int(config['n_networks']),
    #                         'export_filename': output[0],
    #                     })
    #     else:
    #         create_lioness_networks(
    #             input[0], 
    #             input[1], 
    #             input[2], 
    #             '.', 
    #             'cpu', 
    #             lioness_options={
    #                 'start': 1, 
    #                 'end': int(config['n_networks']),
    #                 'export_filename': output[0],
    #                 'ncores': threads
    #             })

rule calculate_baseline_networks:
    input:
        F_TRANS_EXPRESSION_FILE,
        F_MOTIF_FILE,
        F_PPI_FILE,
    output:
        BL_LIONESS_TSV
    threads:
        1 if USE_GPU else config['lioness_threads']
    resources:
        gpus = int(USE_GPU)
    params:
        gpu_manager = gpu_manager
    script:
        'scripts/calculate_lioness_networks.py'

rule calculate_control_networks:
    input:
        C_TRANS_EXPRESSION_FILE,
        F_MOTIF_FILE,
        F_PPI_FILE,
    output:
        C_LIONESS_TSV
    threads:
        1 if USE_GPU else config['lioness_threads']
    resources:
        gpus = int(USE_GPU)
    params:
        gpu_manager = gpu_manager
    script:
        'scripts/calculate_lioness_networks.py'

rule calculate_coexpression_networks:
    input:
        S_ANY_EXPRESSION_FILE
    output:
        os.path.join('coexpression_networks', '{transform}', 
            '{method}', '{sparsity}', '{repeat}', 'lioness.feather')
    threads:
        1 if USE_GPU else config['lioness_threads']
    resources:
        gpus = int(USE_GPU)
    params:
        gpu_manager = gpu_manager
    script:
        f'scripts/calculate_coexpression_networks.py'

rule calculate_baseline_coexpression_matrix:
    input:
        F_TRANS_EXPRESSION_FILE
    output:
        os.path.join('coexpression_matrices', '{transform}', 'baseline', 
            'coexpression.feather')
    script:
        'scripts/calculate_coexpression_matrix.py'

rule calculate_coexpression_matrix:
    input:
        S_ANY_EXPRESSION_FILE
    output:
        os.path.join('coexpression_matrices', '{transform}', '{method}', 
            '{sparsity}', 'coexpression_{repeat}.feather')
    script:
        'scripts/calculate_coexpression_matrix.py'

rule convert_lioness_tsv_to_feather:
    input:
        ANY_LIONESS_TSV
    output:
        ANY_LIONESS_FEATHER,
        ANY_INDEGREE_FEATHER,
        ANY_OUTDEGREE_FEATHER,
    script:
        'scripts/process_lioness_tsv.py'